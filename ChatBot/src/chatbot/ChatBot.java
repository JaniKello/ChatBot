/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatbot;

import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/**
 *
 * @author s702905
 */
public class ChatBot extends javax.swing.JFrame {

    private int kysymys = -1;
    private int ala = 0; // 1 = tieto, 2 = kone, 3 = sähkö
    
    public ChatBot() {
        initComponents();
        chatBot("");
        
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        newMsg = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        msgBox = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMsgActionPerformed(evt);
            }
        });
        newMsg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newMsgKeyPressed(evt);
            }
        });

        msgBox.setColumns(20);
        msgBox.setRows(5);
        jScrollPane1.setViewportView(msgBox);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                    .addComponent(newMsg))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(newMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void newMsgActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void newMsgKeyPressed(java.awt.event.KeyEvent evt) {                                  
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) 
        {
            msgBox.setText(msgBox.getText() + "\nSinä: " + newMsg.getText());
            chatBot(newMsg.getText());
            newMsg.setText("");
        }
    }                                 

    
    private void chatBot (String msg)
    {
        String vastaus = "Botti: ";
        
        if (kysymys == 0 || kysymys < 0)
        {
            if (msg.equals("") == false)
            {
                boolean answered = false;
                
                if (msg.contains("terve") || msg.contains("moi") || msg.contains("hei") || msg.contains("moro") || msg.contains("mo"))
                {
                    switch (randomNum(0, 2))
                    {
                        case 0:
                            vastaus += "moi";
                            break;
                        case 1:
                            vastaus += "hei";
                            break;
                        case 2:
                            vastaus += "moro";
                            break;
                        case 3:
                            vastaus += "terve";
                            break;
                    }
                    
                    answered = true;
                }
                
                // laskin
                 if (msg.contains("lask"))
                 {
                    String laskutoimitus = "";
                    
                    for(int i=0; i < msg.length(); i++)
                    {
                       if(Character.isDigit(msg.charAt(i)) || msg.charAt(i) == '-' || msg.charAt(i) == '+' || msg.charAt(i) == '*' || 
                               msg.charAt(i) == '/' || msg.charAt(i) == '.' || msg.charAt(i) == '^' || msg.charAt(i) == '(' || msg.charAt(i) == ')')
                       {
                           laskutoimitus += Character.toString(msg.charAt(i));
                       }
                    }
                     
                    try 
                    {
                        vastaus += laskutoimitus + " = " + calC(laskutoimitus);
                    } 
                    catch (ScriptException ex) 
                    {
                        Logger.getLogger(ChatBot.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    answered = true;
                 }
                 
                 if (msg.contains("päiväm"))
                 {
                     String timeStamp = new SimpleDateFormat("dd.MM.yyyy").format(Calendar.getInstance().getTime());
                     vastaus += "Nyt on " + timeStamp;
                     
                     answered = true;
                 }
                 
                 if (msg.contains("kello"))
                 {
                     String timeStamp = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
                     vastaus += "Kello on " + timeStamp;
                     
                     answered = true;
                 }
                 
                 //tallentaa käyttäjän antaman tekstin, jos botti ei osannut vastata
                 if (answered == false)
                 {
                    try 
                    {
                        SaveQ(msg);
                    } 
                    catch (IOException ex) 
                    {
                        Logger.getLogger(ChatBot.class.getName()).log(Level.SEVERE, null, ex);
                    }
                 }
                

                msgBox.setText(msgBox.getText() + "\n" + vastaus);
            }
            else
            {
                if (kysymys == -1)
                {
                    vastaus += "Minkä alan opiskelija olet?";
                    kysymys = 1;
                    msgBox.setText(msgBox.getText() + "\n" + vastaus);
                }
            }
        }
        else
        {
            switch (kysymys)
            {
                case 1:
                    
                    if (msg.contains("tietotek"))
                    {
                        vastaus += "Ok";
                        ala = 1;
                        kysymys = 0;
                        msgBox.setText(msgBox.getText() + "\n" + vastaus);
                    }
                    
                    if (msg.contains("konetek"))
                    {
                        vastaus += "Ok";
                        ala = 2;
                        kysymys = 0;
                        msgBox.setText(msgBox.getText() + "\n" + vastaus);
                    }
                    
                    if (msg.contains("sähkötek"))
                    {
                        vastaus += "Ok";
                        ala = 3;
                        kysymys = 0;
                        msgBox.setText(msgBox.getText() + "\n" + vastaus);
                    }
                    
                    break; 
            }
        }
    }
    
    public void SaveQ(String q) throws IOException 
    {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("chatbot.txt", true))) {
            writer.append(q + "\n");
        }
    }
    
    public double calC(String input) throws ScriptException {
        
        ScriptEngineManager mgr = new ScriptEngineManager();    
        ScriptEngine engine = mgr.getEngineByName("JavaScript");        
        return (double)engine.eval(input);
    }
    
    private int randomNum (int min, int max)
    {
        int i = min + (int)(Math.random() * ((max - min) + 1));
        return i;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatBot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatBot().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msgBox;
    private javax.swing.JTextField newMsg;
    // End of variables declaration                   
}
